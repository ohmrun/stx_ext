package stx.core.head;

class Options{
  static public var _(default,null) = new stx.core.body.Options();

  @:noUsing static public function None<T>():Option<T>{
    return StdOption.None;
  }
  @:noUsing static public function Some<T>(v:T):Option<T>{
    return haxe.ds.Option.Some(v);
  }

  @:noUsing static public inline function option<T>(?v:Null<T>):Option<T>{
    return create(v);
  }
  /**
		Produces Option.Some(t) if `t` is not null, Option.None otherwise.
	**/
  @:noUsing static public inline function create<T>(t: T): Option<T> {
    return if (t == null) None(); else Some(t);
  }
    /**
		Produces an Option where `o1` may contain another Option.
	**/
  @:noUsing static public function flatten<T>(o1: Option<Option<T>>): Option<T> {
    return switch (o1.prj()) {
      case StdOption.None       : None();
      case StdOption.Some(o2)   : o2;
    }
  }
}